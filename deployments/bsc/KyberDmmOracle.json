{
  "address": "0xE4E0552452e5cC1306A2bF5B2Fd9b1eA19418795",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IKyberDmmFactory",
          "name": "_factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConnectorShouldBeNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolWithConnectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "contract IKyberDmmFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ec451db4fcea1eebcae4459404bc04ea49dda903435e2ba5a8a723c2c03648a",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xE4E0552452e5cC1306A2bF5B2Fd9b1eA19418795",
    "transactionIndex": 135,
    "gasUsed": "566352",
    "logsBloom": "0x
    "blockHash": "0x682238dd7ff6f0b73e44f5b9222d66496850c3ccf5fb4eab98a01d5d8bbec79e",
    "transactionHash": "0x4ec451db4fcea1eebcae4459404bc04ea49dda903435e2ba5a8a723c2c03648a",
    "logs": [],
    "blockNumber": 27488383,
    "cumulativeGasUsed": "12741348",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x878dFE971d44e9122048308301F540910Bbd934c"
  ],
  "numDeployments": 2,
  "solcInputHash": "cc4a5fcfbc40e40f000214cc2c2caaa7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IKyberDmmFactory\",\"name\":\"_factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConnectorShouldBeNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWithConnectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"contract IKyberDmmFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/KyberDmmOracle.sol\":\"KyberDmmOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/IKyberDmmFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IKyberDmmFactory {\\n    function getPools(IERC20 token0, IERC20 token1) external view returns (address[] memory _tokenPools);\\n}\\n\",\"keccak256\":\"0x7efefe7c0b8b6f610c630fdbafe5e44bc27a53363bb77272e2d3a595be034195\",\"license\":\"MIT\"},\"contracts/interfaces/IKyberDmmPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IKyberDmmPool {\\n    function getTradeInfo() external view returns (uint112 reserve0, uint112 reserve1, uint112 _vReserve0, uint112 _vReserve1, uint256 feeInPrecision);\\n}\\n\",\"keccak256\":\"0xcb3cbcce6996e828378c2ffa916d39f608eb86116e37dfb3fed60ce631320ec5\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0xe51a28ebbc62c06d735a5ce85d1a272f20ea3446253eea2f8f6b6a795d7479c2\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0caf529fe2654de6c5ea12a198a31f80d38079ed2de73492b8fa8c01ff9198aa\",\"license\":\"MIT\"},\"contracts/oracles/KyberDmmOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../interfaces/IKyberDmmFactory.sol\\\";\\nimport \\\"../interfaces/IKyberDmmPool.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\ncontract KyberDmmOracle is IOracle {\\n    using SafeMath for uint256;\\n    using Sqrt for uint256;\\n\\n    IKyberDmmFactory public immutable factory;\\n\\n    constructor(IKyberDmmFactory _factory) {\\n        factory = _factory;\\n    }\\n\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external override view returns (uint256 rate, uint256 weight) {\\n        unchecked {\\n            if (connector == _NONE) {\\n                address[] memory pools = factory.getPools(srcToken, dstToken);\\n\\n                if(pools.length == 0) revert PoolNotFound();\\n\\n                for (uint256 i = 0; i < pools.length; i++) {\\n                    (uint256 b0, uint256 b1) = _getBalances(srcToken, dstToken, pools[i]);\\n\\n                    uint256 w = b0.mul(b1).sqrt();\\n                    rate = rate.add(b1.mul(1e18).div(b0).mul(w));\\n                    weight = weight.add(w);\\n                }\\n            } else {\\n                address[] memory pools0 = factory.getPools(srcToken, connector);\\n                address[] memory pools1 = factory.getPools(connector, dstToken);\\n\\n                if(pools0.length == 0 || pools1.length == 0) revert PoolWithConnectorNotFound();\\n\\n                for (uint256 i = 0; i < pools0.length; i++) {\\n                    for (uint256 j = 0; j < pools1.length; j++) {\\n                        (uint256 b0, uint256 bc0) = _getBalances(srcToken, connector, pools0[i]);\\n                        (uint256 bc1, uint256 b1) = _getBalances(connector, dstToken, pools1[j]);\\n\\n                        uint256 w = Math.min(b0.mul(bc0), b1.mul(bc1)).sqrt();\\n                        rate = rate.add(b1.mul(bc0).mul(1e18).div(bc1).div(b0).mul(w));\\n                        weight = weight.add(w);\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (weight > 0) {\\n            unchecked { rate /= weight; }\\n        }\\n    }\\n\\n    function _getBalances(IERC20 srcToken, IERC20 dstToken, address pool) private view returns (uint256 srcBalance, uint256 dstBalance) {\\n        (, , srcBalance, dstBalance,) = IKyberDmmPool(pool).getTradeInfo();\\n        if (srcToken > dstToken) {\\n            (srcBalance, dstBalance) = (dstBalance, srcBalance);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd8dee0f5e9b1df05f530e56d0c10247635648b9c04bf55ed1fc967c8938098c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007757601f6109e438819003918201601f19168301916001600160401b0383118484101761007c5780849260209460405283398101031261007757516001600160a01b038116810361007757608052604051610951908161009382396080518181816097015281816101a101526103240152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe61010060c090604082528060405260048036101561001c57600080fd5b60009060a09282845260e0928035841c93846314999e79146100c3575050505063c45a01551461004b57600080fd5b346100bf575190817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bb57602090515173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b5180fd5b9085879392346105e45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105e457853573ffffffffffffffffffffffffffffffffffffffff9182821682036105e05760249283359181831683036105dc5760443597828916988981036105d85783899a146000146103165750508851517f5b1dc86f000000000000000000000000000000000000000000000000000000008152865173ffffffffffffffffffffffffffffffffffffffff8087168d8401908152908616602082015291925090829081906040010381857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610309578651916102e8575b508051156102bf57855197965b815189101561028e576101ff836101f68b856106f6565b51168587610825565b919061021361020e84836107ae565b6107c1565b92670de0b6b3a764000090818102918183041490151715610260576102579261024b856102466001979561025195610739565b6107ae565b90610772565b99610772565b980197966101df565b50878960118f7f4e487b71000000000000000000000000000000000000000000000000000000008351525251fd5b995050505050505090505b806102ae575b81515192835260208301525190f35b91826102b991610739565b9161029f565b898951517f76ecffc0000000000000000000000000000000000000000000000000000000008152fd5b610303913d8091833e6102fb81836105e8565b810190610658565b8a6101d2565b89515187513d90823e3d90fd5b9392919987839c989692999c7f0000000000000000000000000000000000000000000000000000000000000000169989818c81806103a48c8a7f5b1dc86f00000000000000000000000000000000000000000000000000000000998a85525197840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b03915afa80156105cb578a92918e918a518093526105af575b50508251519a8b91825281806103ff898b8d5197840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b03915afa9889156105a257865199610587575b508a515115801561057e575b6105555799989a8551905b8a5151821015610544579a9b86519b60809c8d525b8a518d511015610535576104b4908d8c6104828f61047961046f8d8c6104668c8296516106f6565b5116908c610825565b94909551906106f6565b51168a8c610825565b9490916104ae8d61049383876107ae565b9061049e868a6107ae565b90508082101561052e57506107c1565b956107ae565b670de0b6b3a76400009081810291818304149015171561050057846102466104ed946104e86104f398979561024b95610739565b610739565b92610772565b8c516001018d529061043e565b508b8b60118f7f4e487b71000000000000000000000000000000000000000000000000000000008351525251fd5b90506107c1565b909c9b50600190910190610429565b9b9950505050505050505050610299565b879051517f2fadbd9d000000000000000000000000000000000000000000000000000000008152fd5b5088511561041e565b61059b91993d8091833e6102fb81836105e8565b978c610412565b81515187513d90823e3d90fd5b6105c2913d8091833e6102fb81836105e8565b8d528e806103bd565b83515189513d90823e3d90fd5b8880fd5b8680fd5b8480fd5b8280fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761062957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9060209081838203126106f157825167ffffffffffffffff938482116106f1570181601f820112156106f1578051938411610629578360051b90604051946106a2858401876105e8565b855283808601928201019283116106f1578301905b8282106106c5575050505090565b815173ffffffffffffffffffffffffffffffffffffffff811681036106f15781529083019083016106b7565b600080fd5b805182101561070a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8115610743570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9190820180921161077f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561077f57565b90600060038311156107fd57508160018082811c01915b8483106107e457505050565b91935090836107f38183610739565b01821c91906107d8565b9161080457565b60019150565b51906dffffffffffffffffffffffffffff821682036106f157565b929092604051907fd669402700000000000000000000000000000000000000000000000000000000825260a08260048173ffffffffffffffffffffffffffffffffffffffff8098165afa93841561090f5760009283956108a9575b50806dffffffffffffffffffffffffffff8096169586941696169116116108a45750565b929150565b9290945060a0833d8211610907575b816108c560a093836105e8565b8101031261090457506108d78261080a565b506108e46020830161080a565b506108fd60606108f66040850161080a565b930161080a565b9338610880565b80fd5b3d91506108b8565b6040513d6000823e3d90fdfea2646970667358221220ef16e66ef1540996169606abb17f4b3b3e62bfddb94a571fc95afff3a254cf1864736f6c63430008130033",
  "deployedBytecode": "0x61010060c090604082528060405260048036101561001c57600080fd5b60009060a09282845260e0928035841c93846314999e79146100c3575050505063c45a01551461004b57600080fd5b346100bf575190817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100bb57602090515173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b5180fd5b9085879392346105e45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105e457853573ffffffffffffffffffffffffffffffffffffffff9182821682036105e05760249283359181831683036105dc5760443597828916988981036105d85783899a146000146103165750508851517f5b1dc86f000000000000000000000000000000000000000000000000000000008152865173ffffffffffffffffffffffffffffffffffffffff8087168d8401908152908616602082015291925090829081906040010381857f0000000000000000000000000000000000000000000000000000000000000000165afa908115610309578651916102e8575b508051156102bf57855197965b815189101561028e576101ff836101f68b856106f6565b51168587610825565b919061021361020e84836107ae565b6107c1565b92670de0b6b3a764000090818102918183041490151715610260576102579261024b856102466001979561025195610739565b6107ae565b90610772565b99610772565b980197966101df565b50878960118f7f4e487b71000000000000000000000000000000000000000000000000000000008351525251fd5b995050505050505090505b806102ae575b81515192835260208301525190f35b91826102b991610739565b9161029f565b898951517f76ecffc0000000000000000000000000000000000000000000000000000000008152fd5b610303913d8091833e6102fb81836105e8565b810190610658565b8a6101d2565b89515187513d90823e3d90fd5b9392919987839c989692999c7f0000000000000000000000000000000000000000000000000000000000000000169989818c81806103a48c8a7f5b1dc86f00000000000000000000000000000000000000000000000000000000998a85525197840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b03915afa80156105cb578a92918e918a518093526105af575b50508251519a8b91825281806103ff898b8d5197840190602090939293604083019473ffffffffffffffffffffffffffffffffffffffff809216845216910152565b03915afa9889156105a257865199610587575b508a515115801561057e575b6105555799989a8551905b8a5151821015610544579a9b86519b60809c8d525b8a518d511015610535576104b4908d8c6104828f61047961046f8d8c6104668c8296516106f6565b5116908c610825565b94909551906106f6565b51168a8c610825565b9490916104ae8d61049383876107ae565b9061049e868a6107ae565b90508082101561052e57506107c1565b956107ae565b670de0b6b3a76400009081810291818304149015171561050057846102466104ed946104e86104f398979561024b95610739565b610739565b92610772565b8c516001018d529061043e565b508b8b60118f7f4e487b71000000000000000000000000000000000000000000000000000000008351525251fd5b90506107c1565b909c9b50600190910190610429565b9b9950505050505050505050610299565b879051517f2fadbd9d000000000000000000000000000000000000000000000000000000008152fd5b5088511561041e565b61059b91993d8091833e6102fb81836105e8565b978c610412565b81515187513d90823e3d90fd5b6105c2913d8091833e6102fb81836105e8565b8d528e806103bd565b83515189513d90823e3d90fd5b8880fd5b8680fd5b8480fd5b8280fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761062957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b9060209081838203126106f157825167ffffffffffffffff938482116106f1570181601f820112156106f1578051938411610629578360051b90604051946106a2858401876105e8565b855283808601928201019283116106f1578301905b8282106106c5575050505090565b815173ffffffffffffffffffffffffffffffffffffffff811681036106f15781529083019083016106b7565b600080fd5b805182101561070a5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8115610743570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b9190820180921161077f57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181029291811591840414171561077f57565b90600060038311156107fd57508160018082811c01915b8483106107e457505050565b91935090836107f38183610739565b01821c91906107d8565b9161080457565b60019150565b51906dffffffffffffffffffffffffffff821682036106f157565b929092604051907fd669402700000000000000000000000000000000000000000000000000000000825260a08260048173ffffffffffffffffffffffffffffffffffffffff8098165afa93841561090f5760009283956108a9575b50806dffffffffffffffffffffffffffff8096169586941696169116116108a45750565b929150565b9290945060a0833d8211610907575b816108c560a093836105e8565b8101031261090457506108d78261080a565b506108e46020830161080a565b506108fd60606108f66040850161080a565b930161080a565b9338610880565b80fd5b3d91506108b8565b6040513d6000823e3d90fdfea2646970667358221220ef16e66ef1540996169606abb17f4b3b3e62bfddb94a571fc95afff3a254cf1864736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}