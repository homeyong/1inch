{
  "address": "0xb57CdEC62Df2AA93AC4C2449Eb50eB4d2f264f3e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICurveProvider",
          "name": "_addressProvider",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConnectorShouldBeNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolWithConnectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "addressProvider",
      "outputs": [
        {
          "internalType": "contract ICurveProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x874a84084dcf2fae6e26d843604b63bb33d555881e699074f93db5fc3b30d6dd",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0xb57CdEC62Df2AA93AC4C2449Eb50eB4d2f264f3e",
    "transactionIndex": 19,
    "gasUsed": "827848",
    "logsBloom": "0x
    "blockHash": "0x2b81112eb68fb9ba7e802ebec2954ebd61f30bbf391145808add3d20521aa90b",
    "transactionHash": "0x874a84084dcf2fae6e26d843604b63bb33d555881e699074f93db5fc3b30d6dd",
    "logs": [],
    "blockNumber": 17469917,
    "cumulativeGasUsed": "2490020",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000022D53366457F9d5E68Ec105046FC4383"
  ],
  "numDeployments": 1,
  "solcInputHash": "d4aa12aaa031644ee8778b3df3bd0a69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurveProvider\",\"name\":\"_addressProvider\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConnectorShouldBeNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWithConnectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"addressProvider\",\"outputs\":[{\"internalType\":\"contract ICurveProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/CurveOracle.sol\":\"CurveOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface ICurveProvider {\\n    function get_address (uint256 _id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05828fcb7d6a651368802eb3018a9d94f270fcb76cf2137e2121e0010517de65\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface ICurveRegistry {\\n    function find_pool_for_coins(address _srcToken, address _dstToken, uint256 _index) external view returns (address);\\n    function get_coin_indices(address _pool, address _srcToken, address _dstToken) external view returns (int128, int128, bool);\\n    function get_balances(address _pool) external view returns (uint256[8] memory);\\n    function get_underlying_balances(address _pool) external view returns (uint256[8] memory);\\n}\\n\",\"keccak256\":\"0x6a2ee1bd1feb177537e2c479879a13051fe771a76d1a92911c53c43fa43c026a\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface ICurveSwap {\\n    function get_dy(int128 _from, int128 _to, uint256 _amount) external view returns (uint256);\\n    function get_dy_underlying(int128 _from, int128 _to, uint256 _amount) external view returns (uint256);\\n}\\n\\ninterface ICurveSwapNew {\\n    function get_dy(uint256 _from, uint256 _to, uint256 _amount) external view returns (uint256);\\n    function get_dy_underlying(uint256 _from, uint256 _to, uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb0d8fe953afebc30b4a3ed1509eea45e0852ac12003c12c1937acecfae4d966f\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0xe51a28ebbc62c06d735a5ce85d1a272f20ea3446253eea2f8f6b6a795d7479c2\",\"license\":\"MIT\"},\"contracts/libraries/Sqrt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nlibrary Sqrt {\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        unchecked {\\n            if (y > 3) {\\n                z = y;\\n                uint x = y / 2 + 1;\\n                while (x < z) {\\n                    z = x;\\n                    x = (y / x + x) / 2;\\n                }\\n            } else if (y != 0) {\\n                z = 1;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0caf529fe2654de6c5ea12a198a31f80d38079ed2de73492b8fa8c01ff9198aa\",\"license\":\"MIT\"},\"contracts/oracles/CurveOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\nimport \\\"../libraries/Sqrt.sol\\\";\\n\\nimport \\\"../interfaces/ICurveRegistry.sol\\\";\\nimport \\\"../interfaces/ICurveProvider.sol\\\";\\nimport \\\"../interfaces/ICurveSwap.sol\\\";\\n\\ncontract CurveOracle is IOracle {\\n    using Sqrt for uint256;\\n\\n    ICurveProvider public immutable addressProvider;\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n\\n    constructor(ICurveProvider _addressProvider) {\\n        addressProvider = _addressProvider;\\n    }\\n\\n    function getRate(IERC20 _srcToken, IERC20 _dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        if(connector != _NONE) revert ConnectorShouldBeNone();\\n\\n        address srcToken = address(_srcToken);\\n        address dstToken = address(_dstToken);\\n        uint256 index = 0;\\n        ICurveRegistry registry = ICurveRegistry(addressProvider.get_address(0));\\n        address pool = registry.find_pool_for_coins(srcToken, dstToken, index);\\n\\n        while (pool != address(0)) {\\n            (int128 srcTokenIndex, int128 dstTokenIndex, bool isUnderlying) = registry.get_coin_indices(pool, srcToken, dstToken);\\n            uint256 b0;\\n            uint256 b1;\\n            uint256 w;\\n            if (!isUnderlying) {\\n                uint256[8] memory balances = registry.get_balances(pool);\\n                w = (balances[uint128(srcTokenIndex)] * balances[uint128(dstTokenIndex)]).sqrt();\\n                b0 = balances[uint128(srcTokenIndex)] / 10000;\\n                (bool success, bytes memory data) = pool.staticcall(abi.encodeWithSelector(ICurveSwap.get_dy.selector, srcTokenIndex, dstTokenIndex, b0));\\n                if (success && data.length == 32) {\\n                    b1 = abi.decode(data, (uint256));\\n                } else {\\n                    b1 = ICurveSwapNew(pool).get_dy(uint128(srcTokenIndex), uint128(dstTokenIndex), b0);\\n                }\\n            } else {\\n                uint256[8] memory balances = registry.get_underlying_balances(pool);\\n                uint256 srcDecimals = ERC20(srcToken).decimals();\\n                w = (balances[uint128(srcTokenIndex)] * balances[uint128(dstTokenIndex)] / (10 ** (36 - srcDecimals - ERC20(dstToken).decimals()))).sqrt();\\n                b0 = balances[uint128(srcTokenIndex)] / (10 ** (14 - srcDecimals));\\n                (bool success, bytes memory data) = pool.staticcall(abi.encodeWithSelector(ICurveSwap.get_dy_underlying.selector, srcTokenIndex, dstTokenIndex, b0));\\n                if (success && data.length == 32) {\\n                    b1 = abi.decode(data, (uint256));\\n                } else {\\n                    b1 = ICurveSwapNew(pool).get_dy_underlying(uint128(srcTokenIndex), uint128(dstTokenIndex), b0);\\n                }\\n            }\\n\\n            rate += b1 * 1e18 / b0 * w;\\n            weight += w;\\n\\n            pool = registry.find_pool_for_coins(srcToken, dstToken, ++index);\\n        }\\n\\n        if (weight > 0) {\\n            unchecked { rate /= weight; }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8e823f9c8fd880ddb1db009e3c12f83a7ce9e93e8263fc630a3e4a7244ba111d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007057601f610ea038819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b038116810361007057608052604051610e14908161008c8239608051818181608001526101aa0152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816314999e79146100a95750632954018c1461003557600080fd5b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b600080fd5b346100a45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760043573ffffffffffffffffffffffffffffffffffffffff811681036100a4576024359173ffffffffffffffffffffffffffffffffffffffff831683036100a4576044359073ffffffffffffffffffffffffffffffffffffffff82168092036100a45760009073ffffffffffffffffffffffffffffffffffffffff60009303610b465750600091604051917f493f4f740000000000000000000000000000000000000000000000000000000083526000600484015260208360248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa92831561061457600093610b25575b506040517f6982eb0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015273ffffffffffffffffffffffffffffffffffffffff871660248201526000604482015260208160648173ffffffffffffffffffffffffffffffffffffffff88165afa90811561061457600091610b06575b50939193905b73ffffffffffffffffffffffffffffffffffffffff821615610adf57604051907feb85226d00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8316600483015273ffffffffffffffffffffffffffffffffffffffff8716602483015273ffffffffffffffffffffffffffffffffffffffff8816604483015260608260648173ffffffffffffffffffffffffffffffffffffffff89165afa91821561061457600092600091600091610a86575b5061074a57604051927f92e3cc2d00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff851660048501526101008460248173ffffffffffffffffffffffffffffffffffffffff8b165afa93841561061457600094610717575b506127106104236104096104046103e06fffffffffffffffffffffffffffffffff861689610c90565b516103fd6fffffffffffffffffffffffffffffffff88168a610c90565b5190610cd0565b610d95565b956fffffffffffffffffffffffffffffffff841690610c90565b5104809560008060405160208101907f5e0d443f0000000000000000000000000000000000000000000000000000000082526104ab8161047f888b8b602485016040919493926060820195600f0b8252600f0b60208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610b6e565b5190845afa926104b9610d2a565b938061070c575b1561064f5750505090506020818051810103126100a45760200151905b670de0b6b3a7640000938285810204851483151715610620578361050c6105119261051d976105179602610cf1565b610cd0565b90610d88565b94610d88565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461062057600101926040517f6982eb0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015273ffffffffffffffffffffffffffffffffffffffff8716602482015284604482015260208160648173ffffffffffffffffffffffffffffffffffffffff88165afa908115610614576000916105e5575b5091939190610275565b610607915060203d60201161060d575b6105ff8183610b6e565b810190610bde565b876105db565b503d6105f5565b6040513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff91821660048201529416602485015260448401919091526020915082908173ffffffffffffffffffffffffffffffffffffffff81606481015b0392165afa908115610614576000916106da575b50906104dd565b90506020813d602011610704575b816106f560209383610b6e565b810103126100a45751896106d3565b3d91506106e8565b5060208451146104c0565b61073c9194506101003d61010011610743575b6107348183610b6e565b810190610c18565b928a6103b7565b503d61072a565b604051927f59f4f35100000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff851660048501526101008460248173ffffffffffffffffffffffffffffffffffffffff8b165afa93841561061457600094610a63575b506040517f313ce56700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff8e165afa90811561061457600091610a44575b5061084e6108316fffffffffffffffffffffffffffffffff841687610c90565b516103fd6fffffffffffffffffffffffffffffffff861688610c90565b602460ff83168103116106205773ffffffffffffffffffffffffffffffffffffffff60208d6004604051809481937f313ce567000000000000000000000000000000000000000000000000000000008352165afa80156106145760ff91600091610a15575b501660ff8316016024039060ff8316602403821161062057610404610409916108de6108e494610ce3565b90610cf1565b51600e918260ff8216810311610620576109069260ff6108de92169003610ce3565b809560008060405160208101907f07211ef70000000000000000000000000000000000000000000000000000000082526109608161047f888b8b602485016040919493926060820195600f0b8252600f0b60208201520152565b5190845afa9261096e610d2a565b9380610a0a575b156109965750505090506020818051810103126100a45760200151906104dd565b6040517f85f11d1e0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff91821660048201529416602485015260448401919091526020915082908173ffffffffffffffffffffffffffffffffffffffff81606481016106bf565b506020845114610975565b610a37915060203d602011610a3d575b610a2f8183610b6e565b810190610c77565b8e6108b3565b503d610a25565b610a5d915060203d602011610a3d57610a2f8183610b6e565b8b610811565b610a7f9194506101003d61010011610743576107348183610b6e565b928a6107bc565b935050506060823d606011610ad7575b81610aa360609383610b6e565b810103126100a457610ab482610c0a565b6040610ac260208501610c0a565b9301519081151582036100a45792908a610340565b3d9150610a96565b6040908580610af5575b82519182526020820152f35b9081610b0091610cf1565b90610ae9565b610b1f915060203d60201161060d576105ff8183610b6e565b8761026f565b610b3f91935060203d60201161060d576105ff8183610b6e565b91866101db565b807fccf7e6f70000000000000000000000000000000000000000000000000000000060049252fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610baf57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b908160209103126100a4575173ffffffffffffffffffffffffffffffffffffffff811681036100a45790565b519081600f0b82036100a457565b9061010080838303126100a45781601f840112156100a4576040519281840184811067ffffffffffffffff821117610baf57604052839181019283116100a457905b828210610c675750505090565b8151815260209182019101610c5a565b908160209103126100a4575160ff811681036100a45790565b906008811015610ca15760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181029291811591840414171561062057565b604d811161062057600a0a90565b8115610cfb570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b3d15610d83573d9067ffffffffffffffff8211610baf5760405191610d7760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610b6e565b82523d6000602084013e565b606090565b9190820180921161062057565b9060006003831115610dd157508160018082811c01915b848310610db857505050565b9193509083610dc78183610cf1565b01821c9190610dac565b91610dd857565b6001915056fea26469706673582212205308c8961f525101a79103b9815052efb3ee6ccf6e4dd471ac173f4059fd57a564736f6c63430008130033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816314999e79146100a95750632954018c1461003557600080fd5b346100a45760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a457602060405173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b600080fd5b346100a45760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a45760043573ffffffffffffffffffffffffffffffffffffffff811681036100a4576024359173ffffffffffffffffffffffffffffffffffffffff831683036100a4576044359073ffffffffffffffffffffffffffffffffffffffff82168092036100a45760009073ffffffffffffffffffffffffffffffffffffffff60009303610b465750600091604051917f493f4f740000000000000000000000000000000000000000000000000000000083526000600484015260208360248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa92831561061457600093610b25575b506040517f6982eb0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015273ffffffffffffffffffffffffffffffffffffffff871660248201526000604482015260208160648173ffffffffffffffffffffffffffffffffffffffff88165afa90811561061457600091610b06575b50939193905b73ffffffffffffffffffffffffffffffffffffffff821615610adf57604051907feb85226d00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8316600483015273ffffffffffffffffffffffffffffffffffffffff8716602483015273ffffffffffffffffffffffffffffffffffffffff8816604483015260608260648173ffffffffffffffffffffffffffffffffffffffff89165afa91821561061457600092600091600091610a86575b5061074a57604051927f92e3cc2d00000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff851660048501526101008460248173ffffffffffffffffffffffffffffffffffffffff8b165afa93841561061457600094610717575b506127106104236104096104046103e06fffffffffffffffffffffffffffffffff861689610c90565b516103fd6fffffffffffffffffffffffffffffffff88168a610c90565b5190610cd0565b610d95565b956fffffffffffffffffffffffffffffffff841690610c90565b5104809560008060405160208101907f5e0d443f0000000000000000000000000000000000000000000000000000000082526104ab8161047f888b8b602485016040919493926060820195600f0b8252600f0b60208201520152565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101835282610b6e565b5190845afa926104b9610d2a565b938061070c575b1561064f5750505090506020818051810103126100a45760200151905b670de0b6b3a7640000938285810204851483151715610620578361050c6105119261051d976105179602610cf1565b610cd0565b90610d88565b94610d88565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461062057600101926040517f6982eb0b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015273ffffffffffffffffffffffffffffffffffffffff8716602482015284604482015260208160648173ffffffffffffffffffffffffffffffffffffffff88165afa908115610614576000916105e5575b5091939190610275565b610607915060203d60201161060d575b6105ff8183610b6e565b810190610bde565b876105db565b503d6105f5565b6040513d6000823e3d90fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff91821660048201529416602485015260448401919091526020915082908173ffffffffffffffffffffffffffffffffffffffff81606481015b0392165afa908115610614576000916106da575b50906104dd565b90506020813d602011610704575b816106f560209383610b6e565b810103126100a45751896106d3565b3d91506106e8565b5060208451146104c0565b61073c9194506101003d61010011610743575b6107348183610b6e565b810190610c18565b928a6103b7565b503d61072a565b604051927f59f4f35100000000000000000000000000000000000000000000000000000000845273ffffffffffffffffffffffffffffffffffffffff851660048501526101008460248173ffffffffffffffffffffffffffffffffffffffff8b165afa93841561061457600094610a63575b506040517f313ce56700000000000000000000000000000000000000000000000000000000815260208160048173ffffffffffffffffffffffffffffffffffffffff8e165afa90811561061457600091610a44575b5061084e6108316fffffffffffffffffffffffffffffffff841687610c90565b516103fd6fffffffffffffffffffffffffffffffff861688610c90565b602460ff83168103116106205773ffffffffffffffffffffffffffffffffffffffff60208d6004604051809481937f313ce567000000000000000000000000000000000000000000000000000000008352165afa80156106145760ff91600091610a15575b501660ff8316016024039060ff8316602403821161062057610404610409916108de6108e494610ce3565b90610cf1565b51600e918260ff8216810311610620576109069260ff6108de92169003610ce3565b809560008060405160208101907f07211ef70000000000000000000000000000000000000000000000000000000082526109608161047f888b8b602485016040919493926060820195600f0b8252600f0b60208201520152565b5190845afa9261096e610d2a565b9380610a0a575b156109965750505090506020818051810103126100a45760200151906104dd565b6040517f85f11d1e0000000000000000000000000000000000000000000000000000000081526fffffffffffffffffffffffffffffffff91821660048201529416602485015260448401919091526020915082908173ffffffffffffffffffffffffffffffffffffffff81606481016106bf565b506020845114610975565b610a37915060203d602011610a3d575b610a2f8183610b6e565b810190610c77565b8e6108b3565b503d610a25565b610a5d915060203d602011610a3d57610a2f8183610b6e565b8b610811565b610a7f9194506101003d61010011610743576107348183610b6e565b928a6107bc565b935050506060823d606011610ad7575b81610aa360609383610b6e565b810103126100a457610ab482610c0a565b6040610ac260208501610c0a565b9301519081151582036100a45792908a610340565b3d9150610a96565b6040908580610af5575b82519182526020820152f35b9081610b0091610cf1565b90610ae9565b610b1f915060203d60201161060d576105ff8183610b6e565b8761026f565b610b3f91935060203d60201161060d576105ff8183610b6e565b91866101db565b807fccf7e6f70000000000000000000000000000000000000000000000000000000060049252fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610baf57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b908160209103126100a4575173ffffffffffffffffffffffffffffffffffffffff811681036100a45790565b519081600f0b82036100a457565b9061010080838303126100a45781601f840112156100a4576040519281840184811067ffffffffffffffff821117610baf57604052839181019283116100a457905b828210610c675750505090565b8151815260209182019101610c5a565b908160209103126100a4575160ff811681036100a45790565b906008811015610ca15760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181029291811591840414171561062057565b604d811161062057600a0a90565b8115610cfb570490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b3d15610d83573d9067ffffffffffffffff8211610baf5760405191610d7760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610b6e565b82523d6000602084013e565b606090565b9190820180921161062057565b9060006003831115610dd157508160018082811c01915b848310610db857505050565b9193509083610dc78183610cf1565b01821c9190610dac565b91610dd857565b6001915056fea26469706673582212205308c8961f525101a79103b9815052efb3ee6ccf6e4dd471ac173f4059fd57a564736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}