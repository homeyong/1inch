{
  "address": "0x89314d57A8A4E636A00922ac289BC3a9a69C4361",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISynthetixProxy",
          "name": "_proxy",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ConnectorShouldBeNone",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolWithConnectorNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnregisteredToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "dstToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "connector",
          "type": "address"
        }
      ],
      "name": "getRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract ISynthetixProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xde4acd4ea3a26cd83df592c58e75225c000bf0b8ec365b28c452baa2eb5201d7",
  "receipt": {
    "to": null,
    "from": "0x56E44874F624EbDE6efCc783eFD685f0FBDC6dcF",
    "contractAddress": "0x89314d57A8A4E636A00922ac289BC3a9a69C4361",
    "transactionIndex": 0,
    "gasUsed": "547013",
    "logsBloom": "0x
    "blockHash": "0x65c11fd527055872a2b39fb1213187e82c30baabbff01fa0b0f772873c194155",
    "transactionHash": "0xde4acd4ea3a26cd83df592c58e75225c000bf0b8ec365b28c452baa2eb5201d7",
    "logs": [],
    "blockNumber": 86892742,
    "cumulativeGasUsed": "547013",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Cb059b7e74fD21665968C908806143E744D5F30"
  ],
  "numDeployments": 1,
  "solcInputHash": "edb6444afada1f09d5e3ae7cac8824fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISynthetixProxy\",\"name\":\"_proxy\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ConnectorShouldBeNone\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWithConnectorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnregisteredToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"connector\",\"type\":\"address\"}],\"name\":\"getRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract ISynthetixProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/SynthetixOracle.sol\":\"SynthetixOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IOracle {\\n    error ConnectorShouldBeNone();\\n    error PoolNotFound();\\n    error PoolWithConnectorNotFound();\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view returns (uint256 rate, uint256 weight);\\n}\\n\",\"keccak256\":\"0xe51a28ebbc62c06d735a5ce85d1a272f20ea3446253eea2f8f6b6a795d7479c2\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetixAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface ISynthetixAddressResolver {\\n    function getSynth(bytes32 key) external view returns (address);\\n    function getAddress(bytes32 key) external view returns (address);\\n}\\n\",\"keccak256\":\"0x844fa7802bc39e73b1a69fa3c2459e897631e3ad67aba0f9e81f36c8a89f7120\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetixExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISynthetixExchangeRates {\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint256 rate, bool isInvalid);\\n}\\n\",\"keccak256\":\"0xdcb05650f45611a09117d33a35cee030bec88a67f48a83b8cdf60f7e3d1e3ce4\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetixProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface ISynthetixProxy {\\n    function target() external view returns (address);\\n}\\n\",\"keccak256\":\"0xe6a0ec848f602f6a96e86b4f6ae985a906355a85084add756265a4abde3fcc66\",\"license\":\"MIT\"},\"contracts/oracles/SynthetixOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../interfaces/ISynthetixExchangeRates.sol\\\";\\nimport \\\"../interfaces/ISynthetixProxy.sol\\\";\\nimport \\\"../interfaces/ISynthetixAddressResolver.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\ncontract SynthetixOracle is IOracle {\\n    error UnregisteredToken();\\n    error InvalidRate();\\n\\n    ISynthetixProxy public immutable proxy;\\n    IERC20 private constant _ETH = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant _NONE = IERC20(0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF);\\n    uint256 private constant _RATE_TTL = 1 days;\\n    bytes32 private constant _EXCHANGE_RATES_KEY = 0x45786368616e6765526174657300000000000000000000000000000000000000;\\n    bytes32 private constant _SETH_KEY           = 0x50726f7879734554480000000000000000000000000000000000000000000000;\\n    bytes32 private constant _SNX_PROXY_KEY      = 0x50726f7879455243323000000000000000000000000000000000000000000000;\\n    bytes32 private constant _SUSD_PROXY_KEY     = 0x50726f7879455243323073555344000000000000000000000000000000000000;\\n    bytes32 private constant _PROXY_KEY          = 0x50726f7879000000000000000000000000000000000000000000000000000000;\\n    bytes private constant _SNX = \\\"SNX\\\";\\n    bytes private constant _SUSD = \\\"sUSD\\\";\\n\\n    constructor(ISynthetixProxy _proxy) {\\n        proxy = _proxy;\\n    }\\n\\n    function getRate(IERC20 srcToken, IERC20 dstToken, IERC20 connector) external view override returns (uint256 rate, uint256 weight) {\\n        if(connector != _NONE) revert ConnectorShouldBeNone();\\n        ISynthetixAddressResolver resolver = ISynthetixAddressResolver(proxy.target());\\n        ISynthetixExchangeRates exchangeRates = ISynthetixExchangeRates(resolver.getAddress(_EXCHANGE_RATES_KEY));\\n\\n        uint256 srcAnswer = srcToken != _ETH ? _getRate(address(srcToken), resolver, exchangeRates) : _getRate(resolver.getAddress(_SETH_KEY), resolver, exchangeRates);\\n        uint256 dstAnswer = dstToken != _ETH ? _getRate(address(dstToken), resolver, exchangeRates) : _getRate(resolver.getAddress(_SETH_KEY), resolver, exchangeRates);\\n        rate = srcAnswer * 1e18 / dstAnswer;\\n        weight = 1e24;\\n    }\\n\\n    function _getRate(address token, ISynthetixAddressResolver resolver, ISynthetixExchangeRates exchangeRates) private view returns(uint256) {\\n        string memory symbol = ERC20(token).symbol();\\n\\n        bytes32 proxyKey;\\n        if (_memcmp(bytes(symbol), _SNX)) {\\n            proxyKey = _SNX_PROXY_KEY;\\n        } else if (_memcmp(bytes(symbol), _SUSD)) {\\n            proxyKey = _SUSD_PROXY_KEY;\\n        } else {\\n            assembly  (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n                proxyKey := or(_PROXY_KEY, shr(40, mload(add(symbol, 32))))\\n            }\\n        }\\n        if(resolver.getAddress(proxyKey) != token) revert UnregisteredToken();\\n\\n        bytes32 key;\\n        assembly  (\\\"memory-safe\\\") { // solhint-disable-line no-inline-assembly\\n            key := mload(add(symbol, 32))\\n        }\\n\\n        (uint256 answer, bool isInvalid) = exchangeRates.rateAndInvalid(key);\\n        if(isInvalid) revert InvalidRate();\\n\\n        return answer;\\n    }\\n\\n    function _memcmp(bytes memory a, bytes memory b) private pure returns(bool) {\\n        return (a.length == b.length) && (keccak256(a) == keccak256(b));\\n    }\\n}\\n\",\"keccak256\":\"0xad1e433074bc7501275059df4c25dc7ae2bf1ec8e9e6f411176fbf79b1ef87f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461007057601f61098e38819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b038116810361007057608052604051610902908161008c8239608051818181608301526101550152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c91826314999e79146100ab57505063ec5568891461003a57600080fd5b346100a757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a7576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b84919250346100a75760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a75780359173ffffffffffffffffffffffffffffffffffffffff9081841680940361041b57602491823595818716809703610417576044358281168091036104135782036103ec57508651947fd4b8399200000000000000000000000000000000000000000000000000000000865260209586818781867f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103235790839185916103cf575b50168851927f21f8a72100000000000000000000000000000000000000000000000000000000938481527f45786368616e67655261746573000000000000000000000000000000000000008882015288818881865afa9081156103c55786916103a8575b5016918282821561032d57610200926104db565b975b80156102a15761021293506104db565b925b670de0b6b3a76400009586810296818804149015171561027857831561024f575050509069d3c21bcecceda100000091845193048352820152f35b6012907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6011907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50909188519081527f50726f78797345544800000000000000000000000000000000000000000000008682015286818681855afa90811561032357906102f093929185916102f6575b506104db565b92610214565b6103169150883d8a1161031c575b61030e8183610469565b8101906104aa565b8a6102ea565b503d610304565b89513d86823e3d90fd5b50505088518381527f50726f78797345544800000000000000000000000000000000000000000000008782015287818781855afa90811561039e578261037b928592889161038157506104db565b97610202565b61039891508b3d8d1161031c5761030e8183610469565b8d6102ea565b8a513d87823e3d90fd5b6103bf9150893d8b1161031c5761030e8183610469565b8b6101ec565b8b513d88823e3d90fd5b6103e69150883d8a1161031c5761030e8183610469565b8a610188565b807fccf7e6f700000000000000000000000000000000000000000000000000000000869252fd5b8380fd5b8280fd5b80fd5b6040810190811067ffffffffffffffff82111761043a57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761043a57604052565b908160209103126104d6575173ffffffffffffffffffffffffffffffffffffffff811681036104d65790565b600080fd5b909173ffffffffffffffffffffffffffffffffffffffff809216916040918251907f95d89b4100000000000000000000000000000000000000000000000000000000825260009160049583828881845afa9182156108955784926107a3575b508551976105478961041e565b6003895261057c6020997f534e5800000000000000000000000000000000000000000000000000000000008b8201528461089f565b1561070c57887f50726f78794552433230000000000000000000000000000000000000000000005b60248a898b5195869485937f21f8a721000000000000000000000000000000000000000000000000000000008552840152165afa9081156107025790869186916106e5575b5016036106bd579060248786930151835195869384927f0c71cd230000000000000000000000000000000000000000000000000000000084528a840152165afa9182156106b1578195829361066b575b50505061064557505090565b517f6a43f8d1000000000000000000000000000000000000000000000000000000008152fd5b91955091508282813d83116106aa575b6106858183610469565b810103126106a657815191015193841515850361041b575092388080610639565b8480fd5b503d61067b565b508251903d90823e3d90fd5b8585517ff0471c88000000000000000000000000000000000000000000000000000000008152fd5b6106fc91508a3d8c1161031c5761030e8183610469565b386105e9565b87513d87823e3d90fd5b610748875161071a8161041e565b8981527f73555344000000000000000000000000000000000000000000000000000000008b8201528461089f565b1561077457887f50726f78794552433230735553440000000000000000000000000000000000006105a4565b888084015160281c7f50726f7879000000000000000000000000000000000000000000000000000000176105a4565b9091503d8085833e6107b58183610469565b810190602090818184031261089157805167ffffffffffffffff9182821161088d570183601f8201121561085d57805191821161086157885193610820847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160186610469565b82855283838301011161085d5790869291835b82811061084757505083010152903861053a565b8181018401518682018501528894508301610833565b8680fd5b60248760418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8780fd5b8580fd5b86513d86823e3d90fd5b90815181519081811493846108b6575b5050505090565b60209293945082012092012014388080806108af56fea26469706673582212204887c2ccaac41850c999efa7cd1abbf00d87ac49b12e2716f6577e75913fdb9664736f6c63430008130033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c91826314999e79146100ab57505063ec5568891461003a57600080fd5b346100a757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a7576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b84919250346100a75760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a75780359173ffffffffffffffffffffffffffffffffffffffff9081841680940361041b57602491823595818716809703610417576044358281168091036104135782036103ec57508651947fd4b8399200000000000000000000000000000000000000000000000000000000865260209586818781867f0000000000000000000000000000000000000000000000000000000000000000165afa9081156103235790839185916103cf575b50168851927f21f8a72100000000000000000000000000000000000000000000000000000000938481527f45786368616e67655261746573000000000000000000000000000000000000008882015288818881865afa9081156103c55786916103a8575b5016918282821561032d57610200926104db565b975b80156102a15761021293506104db565b925b670de0b6b3a76400009586810296818804149015171561027857831561024f575050509069d3c21bcecceda100000091845193048352820152f35b6012907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b6011907f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b50909188519081527f50726f78797345544800000000000000000000000000000000000000000000008682015286818681855afa90811561032357906102f093929185916102f6575b506104db565b92610214565b6103169150883d8a1161031c575b61030e8183610469565b8101906104aa565b8a6102ea565b503d610304565b89513d86823e3d90fd5b50505088518381527f50726f78797345544800000000000000000000000000000000000000000000008782015287818781855afa90811561039e578261037b928592889161038157506104db565b97610202565b61039891508b3d8d1161031c5761030e8183610469565b8d6102ea565b8a513d87823e3d90fd5b6103bf9150893d8b1161031c5761030e8183610469565b8b6101ec565b8b513d88823e3d90fd5b6103e69150883d8a1161031c5761030e8183610469565b8a610188565b807fccf7e6f700000000000000000000000000000000000000000000000000000000869252fd5b8380fd5b8280fd5b80fd5b6040810190811067ffffffffffffffff82111761043a57604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761043a57604052565b908160209103126104d6575173ffffffffffffffffffffffffffffffffffffffff811681036104d65790565b600080fd5b909173ffffffffffffffffffffffffffffffffffffffff809216916040918251907f95d89b4100000000000000000000000000000000000000000000000000000000825260009160049583828881845afa9182156108955784926107a3575b508551976105478961041e565b6003895261057c6020997f534e5800000000000000000000000000000000000000000000000000000000008b8201528461089f565b1561070c57887f50726f78794552433230000000000000000000000000000000000000000000005b60248a898b5195869485937f21f8a721000000000000000000000000000000000000000000000000000000008552840152165afa9081156107025790869186916106e5575b5016036106bd579060248786930151835195869384927f0c71cd230000000000000000000000000000000000000000000000000000000084528a840152165afa9182156106b1578195829361066b575b50505061064557505090565b517f6a43f8d1000000000000000000000000000000000000000000000000000000008152fd5b91955091508282813d83116106aa575b6106858183610469565b810103126106a657815191015193841515850361041b575092388080610639565b8480fd5b503d61067b565b508251903d90823e3d90fd5b8585517ff0471c88000000000000000000000000000000000000000000000000000000008152fd5b6106fc91508a3d8c1161031c5761030e8183610469565b386105e9565b87513d87823e3d90fd5b610748875161071a8161041e565b8981527f73555344000000000000000000000000000000000000000000000000000000008b8201528461089f565b1561077457887f50726f78794552433230735553440000000000000000000000000000000000006105a4565b888084015160281c7f50726f7879000000000000000000000000000000000000000000000000000000176105a4565b9091503d8085833e6107b58183610469565b810190602090818184031261089157805167ffffffffffffffff9182821161088d570183601f8201121561085d57805191821161086157885193610820847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601160186610469565b82855283838301011161085d5790869291835b82811061084757505083010152903861053a565b8181018401518682018501528894508301610833565b8680fd5b60248760418c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8780fd5b8580fd5b86513d86823e3d90fd5b90815181519081811493846108b6575b5050505090565b60209293945082012092012014388080806108af56fea26469706673582212204887c2ccaac41850c999efa7cd1abbf00d87ac49b12e2716f6577e75913fdb9664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}